/*
62.Unique Paths

一个机器人位于一个m x n网格的左上角（起始点在下图中标记为“Start”）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？

示例 1：
输入：m = 3, n = 7
输出：28

示例 2：
输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右
3. 向下 -> 向右 -> 向下

示例 3：
输入：m = 7, n = 3
输出：28

示例 4：
输入：m = 3, n = 3
输出：6

来到某个结点，因为只能往右边和下面走，所以一个位置[i,j]依赖的位置是[i-1,j]和[i,j-1]位置两个点之前的数量之和；
*/
#include<stdio.h>
#include<stdlib.h>

int uniquePaths(int m, int n) {
    // 创建一个大小为n的dp数组
    int* dp = (int*)malloc(sizeof(int) * n);

    // 初始化dp数组，每列的初始值为1（第一行只有一条路径）
    for (int i = 0; i < n; i++) {
        dp[i] = 1;
    }
    // 逐行从下往上计算每个位置的路径数
    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            // dp[j] 是当前格子的路径数，等于它上面和左边格子的路径数之和
            dp[j] = dp[j] + dp[j - 1];
        }
    }
    // dp[n-1] 是右下角的路径数
    int result = dp[n - 1];
    free(dp);  // 释放内存
    return result;
}